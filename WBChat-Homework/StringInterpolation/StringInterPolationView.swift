//
//  StringInterPolationView.swift
//  WBChat-Homework
//
//  Created by Halil Yavuz on 27.06.2024.
//

import SwiftUI

struct StringInterPolationView: View {
    
    @State private var selectedDate: Date = .now
    @State private var selectedLanguage = Locale.current
    
    private let languages = [
        (flag: "üá∑üá∫", locale: Locale(identifier: "ru")),
        (flag: "üá∫üá∏", locale: Locale(identifier: "en")),
        (flag: "üáπüá∑", locale: Locale(identifier: "tr")),
        (flag: "üá©üá™", locale: Locale(identifier: "de")),
        (flag: "üá™üá∏", locale: Locale(identifier: "es"))
    ]
    
    var body: some View {
        VStack {
            DatePicker("–í—ã–±–µ—Ä–∏—Ç–µ –î–∞—Ç—É", selection: $selectedDate, displayedComponents: [.date])
                .datePickerStyle(.compact)
                .padding()
            
            
            Picker("Language", selection: $selectedLanguage) {
                ForEach(languages, id: \.locale) { language in
                    Text(language.flag).tag(language.locale)
                }
            }
            .pickerStyle(SegmentedPickerStyle())
            .padding()
            
            
            dateText(for: selectedDate.addingTimeInterval(-2 * 24 * 60 * 60), description: "–ü–æ–∑–∞–≤—á–µ—Ä–∞")
            dateText(for: selectedDate.addingTimeInterval(-24 * 60 * 60), description: "–í—á–µ—Ä–∞")
            dateText(for: selectedDate, description: "–°–µ–≥–æ–¥–Ω—è")
                .fontWeight(.bold)
            dateText(for: selectedDate.addingTimeInterval(24 * 60 * 60), description: "–ó–∞–≤—Ç—Ä–∞")
            dateText(for: selectedDate.addingTimeInterval(2 * 24 * 60 * 60), description: "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞")
        }
        
    }
    
    func dateText(for date: Date, description: String) -> some View {
        VStack {
            HStack {
                Text("\(localizedDescription(description)): \(formattedDate(date))")
                    .padding(.vertical, 3)
            }
            Text("\(spellOut: date, locale: selectedLanguage)")
                .foregroundStyle(.gray)
                .font(.system(size: 13))
        }
        .padding(.vertical, 10)
    }
    
    func formattedDate(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.locale = selectedLanguage
        formatter.dateFormat = "dd MMMM, yyyy"
        return formatter.string(from: date)
    }
    
    func localizedDescription(_ description: String) -> String {
        print("Current locale identifier: \(selectedLanguage.identifier)")
        switch selectedLanguage.identifier {
            
        case "ru":
            switch description {
            case "–ü–æ–∑–∞–≤—á–µ—Ä–∞": return "–ü–æ–∑–∞–≤—á–µ—Ä–∞"
            case "–í—á–µ—Ä–∞": return "–í—á–µ—Ä–∞"
            case "–°–µ–≥–æ–¥–Ω—è": return "–°–µ–≥–æ–¥–Ω—è"
            case "–ó–∞–≤—Ç—Ä–∞": return "–ó–∞–≤—Ç—Ä–∞"
            case "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞": return "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"
            default: return description
                
            }
        case "en":
            switch description {
            case "–ü–æ–∑–∞–≤—á–µ—Ä–∞": return "Day before yesterday"
            case "–í—á–µ—Ä–∞": return "Yesterday"
            case "–°–µ–≥–æ–¥–Ω—è": return "Today"
            case "–ó–∞–≤—Ç—Ä–∞": return "Tomorrow"
            case "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞": return "Day after tomorrow"
            default: return description
            }
        case "tr":
            switch description {
            case "–ü–æ–∑–∞–≤—á–µ—Ä–∞": return "√ñnceki g√ºn"
            case "–í—á–µ—Ä–∞": return "D√ºn"
            case "–°–µ–≥–æ–¥–Ω—è": return "Bug√ºn"
            case "–ó–∞–≤—Ç—Ä–∞": return "Yarƒ±n"
            case "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞": return "√ñb√ºr g√ºn"
            default: return description
            }
        case "de":
            switch description {
            case "–ü–æ–∑–∞–≤—á–µ—Ä–∞": return "Vorgestern"
            case "–í—á–µ—Ä–∞": return "Gestern"
            case "–°–µ–≥–æ–¥–Ω—è": return "Heute"
            case "–ó–∞–≤—Ç—Ä–∞": return "Morgen"
            case "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞": return "√úbermorgen"
            default: return description
            }
        case "es":
            switch description {
            case "–ü–æ–∑–∞–≤—á–µ—Ä–∞": return "Anteayer"
            case "–í—á–µ—Ä–∞": return "Ayer"
            case "–°–µ–≥–æ–¥–Ω—è": return "Hoy"
            case "–ó–∞–≤—Ç—Ä–∞": return "Ma√±ana"
            case "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞": return "Pasado ma√±ana"
            default: return description
            }
        default:
            return description
        }
        
    }
    
}



#Preview {
    StringInterPolationView()
}
